
------------------------------------------------
IMPORTANT NOTE FOR FUNCTIONS, FORMULAS AND VBA 
------------------------------------------------

FUNCTIONS AND FORMULAS

1. Extract certain part within string you enter in the Entry_Form worksheet. 
    =MID (RIGHT(A1,LEN(A1)-FIND("keyword",A1)),#,##)
    
    (1) Formula : MID("text", start number, number of characters)
                  Example: MID("apple", 2, 2) is pp.
    (2) A1      : Once full reference number is entered in Entry_Form worksheet it will be transffered to A1 in Tracker worksheet. 
                  This formula can be written in A2 while A1 is hidden, as we only need certain part of A1.
    (3) keyword : Enter keyword you want the extract to start. 
                  Example: Reference number of content has repeated patterns starting with UID. Say, 123e5##UID99ab00s.
                  And the part you need is UID99ab00s. "UID" will be your keyword.
    (4) #       : Start number
    (5) ##      : Number of characters

2. To auto-populate corresponding error group/sub-group: 
    =VLOOKUP(TargetCell,ReferenceTableToSearh,2,FALSE)
    
3. To highlight cell(s) and rows once certain amounts of errors are tracked: 
    Conditional formatting > New rule > Style: Classic > Use a formula to determine which cells to format

VBA:

1. Cells(x, y) indicates Cells(row#, column#). 
    Ex: row 3 coulmn C = Cells(3, 3) 
    
2. VBA to stop macro when/if cell is empty: 
    If ActiveSheet.Range("A1").Value = "" Then Exit Sub
    
3. Tips:
    To add certain VBA as sub query, simply add code name without () 
    Put the sub code in the right position, otherwise it won't work as expected.


*** In order to differenciate between VBA codes vs notes, notes will be indicated with back tick ' mark below.

'------------------------------------------------
'VBA CODES
'------------------------------------------------

' #1. Insert_buttonA() 
'   Reference: Excel_Macro_Practice/1_Overview - 2(3), 3(1) 
'   Note     : Reversing the order in the code will break the data transfer process. Ex:
'              OK: Worksheets("Tracker").Cells(a, 4) = Worksheets("Entry_Form").Cells(2, 7)
'              Not OK: Worksheets("Entry_Form").Cells(2, 7) = Worksheets("Tracker").Cells(a, 4)

Sub Insert_buttonA()

Dim a As Integer

a = Worksheets("Tracker").Cells(1, 9).Value

Worksheets("Tracker").Cells(a, 4) = Worksheets("Entry_Form").Cells(2, 7)
Worksheets("Tracker").Cells(a, 7) = Worksheets("Entry_Form").Cells(3, 7)
Worksheets("Tracker").Cells(a, 9) = Worksheets("Entry_Form").Cells(4, 7)
Worksheets("Tracker").Cells(a, 8) = Worksheets("Entry_Form").Cells(5, 7)

Worksheets("Entry_Form").Range("Cell1:Cell2").ClearContents

End Sub

'------------------------------------------------
' #2. Insert_buttonB() 
'   Reference: Excel_Macro_Practice/1_Overview - 2(3), 3(2) 
'   Note     : By using SplitMacro, selected items from the list will auto-assign to one and each cells. See #4.
'              After 'transffering' items, Dup_Insert will move items left over as result of SplitMacro.

Sub Insert_buttonB()

Dim a As Integer

a = Worksheets("Tracker").Cells(x,y).Value
'where count number will be sitted

    '1. Do a split first
    SplitMacro1
    SplitMacro2
    
Worksheets("Tracker").Cells(a, y) = Worksheets("Entry_Form").Cells(x, y6)
Worksheets("Tracker").Cells(a, y3) = Worksheets("Entry_Form").Cells(x2, y6)
Worksheets("Tracker").Cells(a, y4) = Worksheets("Entry_Form").Cells(x3, y6)
Worksheets("Tracker").Cells(a, y5) = Worksheets("Entry_Form").Cells(x4, y6)

    '2. For splitted item: repeat as much as needed
    Dup_Insert2
    Dup_Insert3
   
Worksheets("Entry_Form").Range("Cell:Cell2").ClearContents

End Sub


'------------------------------------------------
' #3. Clear_button()
'   Reference: Excel_Macro_Practice/1_Overview - 3(2)


Sub Clear_button()

CarryOn = MsgBox("Are you sure to clear them all?", vbYesNo, "ALERT")
If CarryOn = vbYes Then

Worksheets("Tracker").Range("range1, range2").ClearContents

End If
End Sub


'------------------------------------------------
' #4. Split()
'   Reference: Excel_Macro_Practice/1_Overview - 3(2) 
'   NOTE     : You may or may not have to select multiple error types. Similarly hence Split may or may not take. 
'              Without 'If Activesheet.Ragne("").Value="" Then Exit Sub', macro will break when cell is blank.
'              Record macro to obtain this code: Data > Text To Columns > Delimited > commas.

Sub Split()

If ActiveSheet.Range("A1").Value = "" Then Exit Sub

    Range("A1").Select
    Selection.TextToColumns Destination:=Range("A1"), DataType:=xlDelimited, _
        TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, _
        Semicolon:=False, Comma:=True, Space:=False, Other:=False, OtherChar _
        :="/", FieldInfo:=Array(Array(1, 1), Array(2, 1), Array(3, 1)), _
        TrailingMinusNumbers:=True
        
        
End Sub

'------------------------------------------------
' #5. MultipleSelection()
'   Reference: Excel_Macro_Practice/1_Overview - 3(2)
'   Credit   : https://trumpexcel.com/select-multiple-items-drop-down-list-excel/
'              To allow multiple selections in a Drop Down List in Excel (without repetition)

Private Sub Worksheet_Change(ByVal Target As Range)

Dim Oldvalue As String
Dim Newvalue As String
Application.EnableEvents = True
On Error GoTo Exitsub
If Target.Address = "$A$1" Then 
  If Target.SpecialCells(xlCellTypeAllValidation) Is Nothing Then
    GoTo Exitsub
  Else: If Target.Value = "" Then GoTo Exitsub Else
    Application.EnableEvents = False
    Newvalue = Target.Value
    Application.Undo
    Oldvalue = Target.Value
      If Oldvalue = "" Then
        Target.Value = Newvalue
      Else
        If InStr(1, Oldvalue, Newvalue) = 0 Then
            Target.Value = Oldvalue & "," & Newvalue 
      Else:
        Target.Value = Oldvalue
      End If
    End If
  End If
End If
Application.EnableEvents = True
Exitsub:
Application.EnableEvents = True
End Sub


'- END -
